The class Diagram will be described in terms of the class Interfaces, Services and the Relationships between of each of the relevant classes.

The following classes relate to the non-Functional Requirements of Authentication and Security

1. User: User has an aggregate relationship with Authentication.
The User uses specific services of the Authentication class interface to verify a user and obtain the user-specific menu.

2. Authentication: Authentication provides login and menu generation services via its interface to the User class.
It enables the user to access and perform specific services on the inventory, orders, customer and bracelet objects in the database 
based on user-specific menu options and access privileges.

Authentication uses and is used by The following classes to provide business functionality to the Customer and for user authorization purposes.

3. Orders: Orders has an aggregate relationships with Customer, Bracelet and Pickup location in order to provide its services via its interface.
Those services include:
getOrder()
createOrder()
updateOrder()

4. Customer: Customer is used by Orders to provide the following services to the user via its interface:
getOrders()
CreateCustomer()
updateCustomer()

5. Bracelet: Barcelet has an aggregate relationship with stock and size, allowing the user to:
createProduct()
updateBracelte()

6. Report uses the Bracelet and Stock classes to generate reports for the user.

7. Stock: Stock has an aggregate relationship with stock type, allowing the user to:
updateStock()
createStock()
viewStock(ilterNum:int)
checkLevel()

The interfaces for each class and function will continue to be adjusted as necessary as we interleave through the design and implementation phases to 
realize all the business requirements.

I will now hand over to Callay who will further describe how these classes to the specific business-related functional requirements, 
using instance examples.
 